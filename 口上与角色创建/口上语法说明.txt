其实没什么语法可言……
大部分都是纯文本。记得换行符跟标题格式就没问题。

下面是一些小功能说明：
<<you>>
根据系统设置，会自动显示PC名字或“你”。

<<target>>
会自动替换为被选中的NPC的名称。
主要用在系统文中。
因为可以切换主控，还有counter和NP的预定，所以target的名字是不确定的。

口上事件的话，如果设置上允许玩家修改名字，用<<NPCIDName>>就好。NPCID请替换为角色id。
如果设置上不允许玩家修改名字，就可以不用管，直接用角色自己的名字就成。

<<NPCIDName>>
角色默认的小功能。NPCID请在Chara_main.twee中自行替换为角色id。

<<=either(['文本A','文本B','文本C'])>>
在数组中随机取一个文本显示。文本长度不限。数组长度也不限。
理论上你想塞多少都行……不要忘记逗号分割就得……
小功能内的文本如果要换行，可以用<br>换行符。

<<=maybe([
['文本A', 20],
['文本B', 30],
['文本C', 50],
])>>
在数组中根据设置的概率，随机取一个文本显示。文本长度不限。数组长度也不限。
跟either一样，你想赛多少都行…… 格式没错就不会有问题……
概率要从小到大排序（因为会从前面开始抽选）

<<dashline>>
显示一个分割线

<<nameTag 'cid'>>
以名牌的方式显示角色名字。


<br>换行符。
Action分类时会用。
毕竟指令文本嘛……
肯定有很多零碎分支。如果不用换行符控制的话，是会有很多多余空行的。

<fr>分页/分段符。
分页符要单独一行。
你把它理解成一个 等待符也行。 文本会在这里暂停，等待玩家点击。


#设置符。
以#开头就可以进行某些简单快捷的设置。
例如json，分支选项，小tips。

#:select:选项A|选项B:#
这是一个用设置符创建了一个选项的范例。
选择后，会自动跳转到s1,s2这样的小分支。


#:{ "type":"endPhase" }
这是用设置符设置了一段json的范例。
这种json行常用在事件文本中，用于设置事件的分支节点和停滞节点。
如果什么也不设置就结束了，事件就真的结束了。
json行请放在最后段文本的第一行。
json的设置请压缩在一行内。
以及，文字符一定要用双引号框住！

例如：
#:{ "type": "endPhase", ep:'2' }
这是最后一段话了。
准备跳转到新的分支咯。

这段显示结束后，就会跳转到 ep2的分支。
如果需要根据选项或者条件进行分支，请活用组合技。
不进行设置分支设置的话，会自动在ep上+1.


在事件中，json行内可以设置的变量有：
type, name, eid, ch, ep, sp, option, com, exitlink, exit

type代表设置的类型。

name是事件的名称 就是 :: Story_Opening 中，Opening的部分。
关于事件标题的格式请看memo.twee中的范例和说明。

eid是 地图Id,或角色Id，又或者系统事件Id。
如果没什么必要，就不要在事件途中切换这个id……

ch是事件章节名。 会自动以 _{ch}的格式添加到标题中。
例如 name设置为 Adventure，
ch设置为 WildTalk的话，
标题就会变成 Event_Adventure_WildTalk

虽然用中文也是可以的，但某些浏览器可能有编码问题导致错误。所以最好用英文。

ep是当前分支节点。默认为0。为0时不会从有_ep的标题中搜索。
ep设置为1，就会跳转到 Even_Adventure_WildTalk_ep1。

sp是选项后出现的小分支节点。
选项事件结束时如果不做额外设置的话，默认清除sp并进入下一个ep。

具体可以看看供仪日记内的chapter.twee。
那边有比较全的用法。只是那边的type有点不一样。

option用来做一些额外的演出设置。目前还没实装。预定会有晃动、闪烁什么的特效。

com用来设置<<>>这样框住的小功能。
例如<<set $samplevalues to 1>>这样。又或者一个自定义的小功能，例如<<IsilGetFavo>> 。
$samplevalue可以替换成任意变量。
把变量、数值flag放到com中的话，在回想模式下就不会再度执行影响现有数据。

exitlink
可以改变 Next 按钮显示的文字。
如设置为 '回家'，Next按钮就会变成 '回家'

exit
在事件彻底结束时，用于改变事件结束时的出口位置。
默认结束时跳转到 MainLoop， 就是游戏主界面。
主要用于跳转到特定的页面。
只要你能理解每个 :: Title 内的内容都代表一个网页页面，
那么就可以用这个方式做很多有趣的演出或玩法哦。
你把 :: Title 理解为 era中的 @Title。

#:{ "type":"end", exit:"Title" }
或者
<<includes "Title">> (::开头的情况)
<<Title>> (通过widget注册的情况)
都可以可以理解为era中的 call Title

widget的注册
<<widget "titlename">>
这样就注册了一个 <<titlename>>的小功能了！
<</widget>>
记住，widget的名字只能是英文字符！不能有空格或除了_以外的特殊符号。

<<customTool 1 2>>
这样也可以代入数值。
带入后的数值会储存到。
$args里面， 按照顺序 $args[0], $args[1], $args[2]
顺带一提，不是运行js的<<>>功能，是没法代入算式的……
代入算式或对文字符进行合并，要预先设置一个临时变量。

例如
<<set _temp = '1'+2>>
<<customToll _temp>>
这样，代入到$args[0]的结果就变成 3了！
……嗯，字符串的1+数值2是会变成3的呢……
要规避这种情况，请用 `${int}${int}`的方法。
int是任意一个可能是字符串或数值的变量名。
`${}`这个方法，类似于era中的 {} 或 %%。无论是字符串还是数值都通用的。

arg[0], arg[2], arg['abc'][1]
这样的等同于 ARG:0, ARG:2, ARG:abc:1


关于type的类型：

return
主要用在选项之后。返回选择前的段落。
也可以通过数值设置返回指定的节点。

jump
直接跳转到指定的另一个事件开头。

endPhase
结束当前分支，根据设置进入指定分支。

selectEnd
通过选择结束当前分支，然后根据选项自动分配到新的分支。

onselect
事件中途出现选项，需要等待玩家操作。
玩家操作之前是不会前进的！



一些常用的判定方式。
<<if 条件式>>
当条件式为真时
<<else>>
否则
<</if>>

条件式中可以使用的便利函数：
cond.baseLt(cid, key, val)
cid是角色id, key是health/stamina/sanity/mana这些分配在base下的变量名，val是数值。
Lt就是小于的意思。也就是说
<<if cond.baseLt('Isil', 'mana', 0.1)>>
这个条件式的意思就是，当伊希露的mana低于10%的时候。
如果用大于的方式，反转一下就好。如 !cond.baseLt('Isil', 'nmana', 0.1)

数值如果是 0~1之内的小数的话，则会以百分比判定
数值如果是 1以上的具体值，则会以具体值进行判定。
如果val填入了'max'，就直接判断是否满值。

cond.palamLt(cid, key, val)
与cond.baseLt一样。
只是key是ecstacy,pain,这些分配在palam下的变量。

cond.flagLt(cid, key, val)
这些是分配在Cflag下的数值，例如好感(favo)，信赖(trust), 依赖(depend)。
key可以使任何预设在Cflag下的变量或自己设置的变量名。
这些没有最大值，所以会根据具体值进行判定。

cond.favoLt(cid, key, val)
好感小于……的快捷函数

cond.trustLt(cid, key, val)
信赖小于……的快捷函数

cond.dependLt(cid, key, val)
依赖小于……的快捷函数

cond.isVirgin(cid)
判断是不是处女，如果是男的会根据后穴经验进行判定
如果是女的或扶她则根据秘穴经验进行判定
童贞是另一个函数。

cond.isCockVirgin(cid)
判定是不是童贞。根据P经验进行判定。
如果是没有丁的，则会返回 false。

cond.canSpeak(cid)
判定有无能力说话

cond.canMove(cid)
判定有无能力活动

cond.canActNormal(cid)
判定有无正常思考的能力

cond.isSleeping(cid)
判定是不是在睡觉

cond.isUncons(cid)
判定意识是否清晰

cond.isActive(cid)
判定有无活动能力

cond.isRape(cid)
判定是不是在被强上

cond.canResist(cid)
确认角色是否有正常的抵抗能力

cond.isWeaker(a, b)
判定a是否比b弱。
a,b都是角色id。

cond.isEnergetic(cid, value)
判定精力是否充足用于抵抗。
value是可选项，用于调整判定难度。
范围请填在0~400范围内。
低于30已经是濒死状态了。
300以上的话，大概是hp,sp,san,mp都大于80%的程度
默认值是160.

cond.isFallen(cid)
判定角色是否陷落

cond.OnlyU()
判定现场是不是只有你

cond.OnlyU2()
判定现场是不是只有你和选择对象

cond.hasPenis(cid)
有丁

cond.hasVagina(cid)
有V